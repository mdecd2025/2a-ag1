var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice \n 2a第一組網站:  https://mdecd2025.github.io/2a-ag1/ \n 2a第一 組 倉儲:  https://github.com/mdecd2025/2a-ag1.git/ \xa0 \n \n 課程代號: cd2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n \n 課程評分: \n Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單 \n Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單 \n Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單 \n', 'tags': '', 'url': 'About.html'}, {'title': 'Homework', 'text': '', 'tags': '', 'url': 'Homework.html'}, {'title': 'Week1', 'text': '本周上課完成個人網站與分組網站的基本設定 \n \n', 'tags': '', 'url': 'Week1.html'}, {'title': 'List', 'text': '\n  組員作業網站： \n \n 41271125： https://mdecd2025.github.io/hw-41271125/   \n 41223154： https://mdecd2025.github.io/hw-41223154/   \n 41271131： https://mdecd2025.github.io/hw-41271131/   \n 41271146： https://mdecd2025.github.io/hw-41271146/   \n 41271158： https://mdecd2025.github.io/hw-41271158/ \n \n  組員作業倉儲： \n \n 41271125： https://github.com/mdecd2025/hw-41271125.git   \n 41223154： https://github.com/mdecd2025/hw-41223154.git   \n  41271131： https://github.com/mdecd2025/hw-41271131.git   \n  41271146： https://github.com/mdecd2025/hw-41271146.git   \n 41271158： https://github.com/mdecd2025/hw-41271158.git \xa0 \n \n', 'tags': '', 'url': 'List.html'}, {'title': 'Tasks', 'text': '', 'tags': '', 'url': 'Tasks.html'}, {'title': 'Task1', 'text': 'Q1：什麼是 Webots? \n Webots 是一款開源的機器人模擬軟體，專為機器人研究、教育和工業應用設計。它允許用戶在 3D 環境中設計、測試和模擬機器人，並支援多種程式語言（如 C、C++、Python、MATLAB 和 ROS）。 \n Q2：我可以用 Webots 做什麼? \n Webots 可用於以下用途： 機器人開發與測試：在虛擬環境中設計和測試機器人，避免硬體損壞。 人工智慧與機器學習：訓練機器人進行自動化任務，如導航、圖像識別等。 教育與學習：提供學生和研究人員一個直觀的平台來學習機器人學和控制理論。 多機器人協作：模擬多個機器人在同一環境中的交互與協作。 ROS（Robot Operating System）整合：與 ROS 無縫整合，使開發的控制器能夠在現實世界的機器人上運行。 \n Q3：要使用 Webots，我需要知道什麼? \n 基本程式設計：熟悉 C、C++、Python 或 MATLAB 之一，因為 Webots 支援這些語言來編寫控制器。 機器人學基礎：了解機器人的運動學、感測器、致動器等基本概念。 3D 環境與物理引擎：了解 Webots 如何模擬物理現象（如重力、碰撞、摩擦）。 Webots 環境：熟悉 Webots 介面、世界建模、機器人設定等基本操作。 \n Q4：什麼是世界（World）? \n 在 Webots 中，"世界" 指的是模擬環境的整體，包括： 地形與背景（如地面、天空） 物件（如障礙物、建築物） 燈光與攝影機（用於視覺化與模擬） 機器人（具有感測器、致動器的可控制實體） Webots 的世界文件使用 .wbt 格式，並基於 VRML（Virtual Reality Modeling Language）。 \n Q5：什麼是控制器（Controller）? \n 控制器是機器人的控制程式，它決定機器人的行為。控制器可以用 C、C++、Python、MATLAB 編寫，並用於處理感測器輸入、計算動作並發送指令給機器人的致動器。例如，一個簡單的控制器可以讓機器人根據攝影機輸入來避開障礙物。 \n Q6：什麼是監督控制器（Supervisor Controller）? \n 監督控制器是一種特殊的控制器，它可以控制整個模擬環境，而不僅僅是單個機器人。它能夠： 讀取與修改機器人狀態（例如位置、方向） 創建或刪除物件 控制世界時間（如重置模擬） 與多個機器人交互 監督控制器通常用於高層次控制，例如監控多個機器人、進行自動化測試或模擬複雜場景。 \n', 'tags': '', 'url': 'Task1.html'}, {'title': 'Task2', 'text': '', 'tags': '', 'url': 'Task2.html'}, {'title': 'Task3', 'text': '', 'tags': '', 'url': 'Task3.html'}, {'title': 'Task4', 'text': '', 'tags': '', 'url': 'Task4.html'}, {'title': 'Task5', 'text': '請整理  https://cyberbotics.com/doc/guide/introduction-to-webots  中重要的英文單字與用法, 並且針對其中所使用的英文文法逐句說明: \n 重要單字及用法解析 Simulation  - 模擬  Webots 用於創建機器人模擬的環境，這裡指的是模擬機器人的行為和環境反應。  Rapid prototyping  - 快速原型設計  這是一種開發過程，用來快速創建和測試產品原型。  Locomotion schemes  - 移動方式  指的是機器人移動的方式或模式，如輪式、腿部式或飛行式。  Actuators  - 執行器  是使機器人運作的裝置，如馬達、車輪等。  Controller  - 控制器  在 Webots 中，控制器是負責控制機器人行為的程式。  Supervisor Controller  - 監控控制器  這種控制器可以執行人類操作員通常才會執行的任務，並控制整個模擬環境。  Physics plugin  - 物理插件  用來修改 Webots 模擬中的物理行為。  文法分析  "Webots is a professional mobile robot simulation software package . "  Webots  (主詞 )  + is  (連繫動詞 )  + a professional mobile robot simulation software package  (主詞補語 )。  這句是簡單的描述句，告訴我們 Webots 是一款專業的移動機器人模擬軟體。   "It offers a rapid prototyping environment , that allows the user to create 3D virtual worlds with physics properties such as mass , joints , friction coefficients , etc . "  這句中使用了定語從句  "that allows the user to create . . . "，修飾前面的環境。   "that allows " : 用來描述這個環境具備的功能，這是一個限定性定語從句。   "The user can add simple passive objects or active objects called mobile robots . "   "called mobile robots " 是分詞短語，修飾  "active objects "。這裡的  "called " 用來說明  "active objects " 的名稱是  "mobile robots "。   "Webots also contains a number of interfaces to real mobile robots , so that once your simulated robot behaves as expected , you can transfer its control program to a real robot like e -puck , DARwIn -OP , Nao , etc . "   "so that " 這個引導的目的從句解釋了為什麼 Webots 提供這些接口（目的是為了當模擬機器人按預期運行時，可以將控制程式轉移到真實機器人）。   "A world , in Webots , is a 3D description of the properties of robots and of their environment . "  這是定義句，用來解釋  "world " 是什麼。句中的  "in Webots " 用來說明這個概念是在 Webots 中的特定含義。   "A controller is a computer program that controls a robot specified in a world file . "  這是一個定義句，說明了什麼是  "controller "。其中  "that controls " 是定語從句，修飾  "controller "。  常見的英文文法結構 定義句：通常用來解釋某個名詞的含義。  例子： "A world is a 3D description of the properties of robots . " \n 定語從句：用來修飾名詞，提供更多描述。  例子： "A controller is a program that controls a robot . "  目的從句：用來說明某一行動的目的。  例子： "so that you can transfer its control program to a real robot . "  條件句：通常描述在某些條件下會發生的情況。  例子： "once your simulated robot behaves as expected , you can transfer its control program . . . "  這篇資料簡單而清楚地介紹了 Webots 的基本功能及其應用，並且在文法上多使用定義性和解釋性的句型，幫助讀者理解軟體的各個方面。 \n \n \n \n \n \n \n \n 請摘要出下列內容 :  (放入英文文章內容 ) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Webots 使用者指南 R2025a 摘要：Webots 介紹 什麼是 Webots？ Webots 是一款專業的移動機器人模擬軟體。它允許使用者創建具有物理屬性的 3D 虛擬世界，如質量、關節和摩擦係數等。使用者可以添加被動物件或稱為移動機器人的主動物件，這些機器人可以具有不同的移動方式，如輪式、腿式或飛行機器人。這些機器人可裝配多種感測器和執行器（例如：相機、馬達、距離感測器等）。Webots 允許使用者為每個機器人編程，實現所需的行為。它還具有與實際機器人（如 e -puck、Nao 和 DARwIn -OP 等）接口的功能。  我可以用 Webots 做什麼？ Webots 非常適合用於與移動機器人相關的研究和教育項目，涵蓋的領域包括：  移動機器人原型設計（學術研究、汽車產業、航空業等）  機器人運動研究（如人形機器人、四足機器人等）  多代理研究（如群體智慧、協作型移動機器人等）  自適應行為研究（如遺傳算法、神經網絡、人工智慧等）  機器人教學（機器人學、C /C + + /Java /Python 程式語言教學等）  機器人比賽（例如 Robotstadium 或 Rat \'s Life）  我需要知道什麼才能使用 Webots？ 若要開發模擬，您需要具備基本的程式設計知識，特別是 C、C + +、Java、Python 或 MATLAB 這些語言，用於編寫機器人控制程式。如果您不熟悉這些語言，也可以使用簡單的圖形化程式語言 BotStudio 來編程 e -puck 和 Hemisson 機器人。若您希望創建自定義的機器人模型或在模擬環境中加入特殊物件，則需要具備基本的 3D 電腦圖形和 VRML97 描述語言知識。  如何獲得使用者支援？ Cyberbotics 提供付費的使用者支援服務，包括 Premier Service 和定制開發服務。社群支援也可通過以下平台獲得：  Robotics StackExchange（用於詢問 Webots 相關技術問題）  GitHub Discussions（用於與 Webots 開發和文檔相關的問題）  GitHub Issues（用於報告 Webots 中的錯誤）  Discord（用於快速問題解答和社群討論）  Webots 模擬組成部分： Webots 模擬包括以下組件：  World 文件  ( .wbt )： 定義一個或多個機器人及其環境，並可能依賴外部的 PROTO 文件  ( .proto ) 和紋理。  控制程式： 用於控制上述機器人的程式，可使用 C、C + +、Java、Python 或 MATLAB 編寫。  物理插件（可選）： 可用於修改 Webots 正常的物理行為。  什麼是 World？ 在 Webots 中，世界是對機器人及其環境屬性的 3D 描述。它包含每個物件的位置、方向、幾何形狀、外觀（如顏色或亮度）、物理屬性、物件類型等的描述。世界是以階層結構組織的，物件可以包含其他物件（例如：一個機器人可以包含兩個車輪、一個距離感測器以及一個包含相機的關節）。世界文件不包含機器人的控制程式代碼，它僅指定每個機器人所需的控制程式名稱。世界文件儲存在 Webots 專案中的  "worlds " 子目錄。  什麼是 Controller？ 控制器是控制在世界文件中指定的機器人的程式。控制器可以用 Webots 支援的任何程式語言編寫：C、C + +、Java、Python 或 MATLAB。當模擬啟動時，Webots 會啟動指定的控制程式，每個控制程式作為單獨的進程運行，並將控制程式與模擬中的機器人進行關聯。注意，儘管多個機器人可以使用相同的控制程式代碼，但每個機器人會啟動一個獨立的進程。  什麼是 Supervisor Controller？ Supervisor 控制器是機器人控制器的一種，其 supervisor 欄位設置為 TRUE。它可以執行通常只能由人工操作員完成的操作，而不是由實際機器人完成。Supervisor 控制器可以用上述任一程式語言編寫，但與普通的機器人控制器不同，它將具有訪問特權操作的權限。特權操作包括模擬控制，例如將機器人移動到隨機位置、捕捉模擬畫面等。  這篇指南簡要概述了 Webots 的功能、使用方法以及如何開始進行模擬和機器人編程。 \n \n \n \n \n \n \n \n \n \n \n 請列出上述文章中的重要的英文單字與解釋 , 以及出現在文句中的用法 : \n \n Webots \n \n 解釋：Webots 是一款專業的移動機器人模擬軟體。  用法：   "Webots is a professional mobile robot simulation software . "  在此句中， "Webots " 是主語，指的是一款特定的軟體。   \n \n Simulation \n \n 解釋：模擬，指透過電腦來重現現實世界或設計情境的過程。  用法：   "Webots allows users to create 3D virtual worlds with physics properties . "  在此句中， "simulation " 描述了 Webots 中的虛擬模擬世界。   \n \n Controller \n \n 解釋：控制器，指控制機器人運行的程式或設備。  用法：   "A controller is a computer program that controls a robot specified in a world file . "  在此句中， "controller " 是用來描述控制機器人的程式。   \n \n Prototype \n \n 解釋：原型，指設計的初步版本，用來測試概念或功能。 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 用法：   "Mobile robot prototyping  (academic research , the automotive industry , etc . ) "  在此句中， "prototyping " 描述了移動機器人原型設計的過程。 \n \n \n \n \n \n \n \n \n \n \n Locomotion \n \n 解釋：運動，指移動機器人移動的方式或機制。  用法：   "These robots can have different locomotion schemes  (wheeled robots , legged robots , or flying robots ) . "  在此句中， "locomotion " 指的是機器人運動的方式。   \n \n Sensor \n \n 解釋：感測器，用來探測並收集周圍環境的數據。  用法：   "They may be equipped with a number of sensor and actuator devices , such as distance sensors , drive wheels , cameras . "  在此句中， "sensor " 指的是用來收集環境資訊的裝置。   \n \n Actuator \n \n 解釋：執行器，指能夠根據控制信號驅動機器人行動的裝置。  用法：   "They may be equipped with a number of sensor and actuator devices . "  在此句中， "actuator " 指的是驅動機器人動作的裝置。   \n \n Interface \n \n 解釋：接口，指不同系統或設備間的連接方式或溝通協議。  用法：   "Webots also contains a number of interfaces to real mobile robots . "  在此句中， "interface " 指的是 Webots 與真實機器人之間的連接方式。   \n \n Model \n \n 解釋：模型，指模擬或實際的機器人或物件的數位表示。  用法：   "Webots contains a large number of robot models and controller program examples . "  在此句中， "model " 指的是不同的機器人模型。   \n \n Programming Language \n \n 解釋：程式語言，用來編寫控制程式的語言。  用法：   "A basic knowledge of the C , C + + , Java , Python or MATLAB programming language is necessary . "  在此句中， "programming language " 指的是用來編寫機器人控制程式的語言。   \n \n Environment \n \n 解釋：環境，指機器人所處的虛擬或真實世界。  用法：   "A world file defines one or several robots and their environment . "  在此句中， "environment " 指的是機器人所處的環境。   \n \n Hierarchical Structure \n \n 解釋：階層結構，指在結構上具有層級關係的組織方式。  用法：   "Worlds are organized as hierarchical structures . "  在此句中， "hierarchical structure " 描述了世界檔案中的組織形式。   \n \n Interpret \n \n 解釋：解釋，指執行程式碼而不需要先進行編譯。  用法：   "Python and MATLAB controllers are interpreted by the corresponding run -time systems . "  在此句中， "interpreted " 描述了 Python 和 MATLAB 控制器如何在運行時被解釋執行。   \n \n Compile \n \n 解釋：編譯，指將程式碼轉換為計算機可以直接執行的格式。  用法：   "C and C + + controllers are compiled to platform -dependent binary executables . "  在此句中， "compiled " 描述了 C 和 C + + 控制器如何轉換為二進位執行檔。   \n \n Supervisor \n \n 解釋：監督，指具有高級操作權限的控制器。 \n \n \n \n \n \n 用法： \n \n \n \n \n "The Supervisor controller is the controller of a Robot whose supervisor field is set to TRUE . "  在此句中， "supervisor " 描述了一種具有特權操作權限的控制器。  這些單字及其用法涵蓋了 Webots 的基本功能、使用方式和術語，有助於理解 Webots 模擬軟體的各個方面。 \n \n \n \n \n \n \n \n \n \n \n \n 請詳細說明如何採手動方式在 Webots 建立下列場景 :  ChatGPT 說： 要在 Webots 中手動建立一個簡單的場景，我們可以按照以下步驟操作。我會提供一個範例，假設你想建立一個包含地面、簡單的機器人（例如，e -puck 機器人）和一些障礙物的場景。以下是手動設置的具體步驟：   \n \n 開啟 Webots 軟體 \n \n 首先，啟動 Webots 軟體。如果你尚未安裝 Webots，可以從其官方網站下載並安裝。   \n \n 創建新專案 \n \n 在 Webots 中，點選  "File "（檔案）  >  "New World "（新世界）來創建一個新的世界。  這會自動打開一個新的場景並顯示在視窗中。   \n \n 設置地面 (Ground) \n \n Webots 中的地面通常是一個 Plane 物體，並且預設會包含在新創建的場景中。如果你沒有看到地面，或者想要自定義它：  在左邊的 Scene Tree（場景樹）中，右鍵點擊 WorldInfo  > Add  > Solid。  在  "Solid " 下，選擇 Plane，這將自動添加一個平面。  點擊平面並調整其屬性：  Translation：調整平面的位置，通常設置為  (0 , 0 , 0 )，表示它位於世界的中心。  Size：設定為  (100 ,  0 .1 , 100 ) 使它成為一個大型的地面。   \n \n 加入機器人 (例如 e-puck) \n \n 在 Webots 中，你可以從庫中選擇機器人模型來添加：  在 Scene Tree 中右鍵點擊 WorldInfo，選擇 Add  > Robot。  點擊 Add 後，選擇 e -puck 機器人（它是 Webots 的預設機器人之一）。  e -puck 會自動添加到你的場景中。調整機器人的位置：  Translation：設定為  (0 , 0 , 0 ) 或任何你希望它出現的位置。  在機器人的屬性中，調整其控制程式（如果需要），或者保留預設。   \n \n 加入障礙物 (Obstacle) \n \n 假設你想添加幾個簡單的障礙物，這裡是加入立方體的步驟：  右鍵點擊 WorldInfo，選擇 Add  > Solid。  在  "Solid " 下，選擇 Box，這將添加一個立方體。  調整立方體的位置和大小：  Translation：設定為  (5 ,  0 .5 , 0 )，將立方體放在地面上方。  Size：設定為  (1 , 1 , 1 )，控制障礙物的大小。  重複這個過程來添加更多的障礙物。你可以調整位置來創建更具挑戰性的場景。   \n \n 設置場景屬性 \n \n WorldInfo：可以在 WorldInfo 節點下修改世界的基本信息，比如 name（名稱）或 simulation time step（模擬時間步長）。  調整 time step（模擬步長），這可以影響模擬的精度。通常設置為 32 毫秒（ 0 .032）是合理的。   \n \n 檢查並儲存場景 \n \n 完成以上步驟後，你可以按下 Run 按鈕來檢查場景。  如果你滿意這個場景，可以選擇 File  > Save As 來保存你的場景，並給它一個有意義的名稱。   \n \n 編寫控制程式 \n \n 如果你希望機器人能夠根據特定邏輯運行（例如避開障礙物），你可以編寫控制程式：  在 Scene Tree 中，找到 e -puck 機器人，然後右鍵選擇 Add  > Controller。  選擇一種編程語言（例如 C、C + +、Python 等），並開始編寫控制程式來定義機器人的行為。   \n \n 運行模擬 \n \n 完成場景的設置後，你可以點選上方的 Play 按鈕來運行模擬。  這樣你就可以看到你的機器人如何與障礙物互動，並且可以進行調整和優化。   \n \n 進一步的設置（可選） \n \n 你可以添加更多物體，如樹木、建築、燈光等，以使場景更加豐富。  若你希望進行更高級的控制，還可以編寫 Supervisor 控制器來進行全局管理和控制。  結論 通過以上步驟，你就能夠在 Webots 中手動創建一個簡單的模擬場景，包括地面、機器人和障礙物。你可以繼續探索 Webots 提供的其他功能，像是設置傳感器、進行機器人控制程式編寫，以及進行更多模擬測試。 \n \n \n \n \n \n \n \n \n \n \n \n \n 希望可以手把手一步步說明該如何利用圖形介面 menu 建立這個場景 , 過程中有那些要點必須特別注意 ?  ChatGPT 說： 當你使用 Webots 的圖形介面來建立場景時，通常會使用 Scene Tree 和 3D 視覺化介面 來進行操作。以下是手把手的步驟來創建一個簡單的場景（包含地面、e -puck 機器人和障礙物）。在每一步中，我會指出一些需要特別注意的要點。   \n \n 啟動 Webots 並創建新專案 \n \n 打開 Webots 軟體。  點選上方菜單中的 File（檔案） > New World（新世界），來創建一個新的場景。這會自動打開一個新的空白世界。   \n \n 加入地面 (Ground) \n \n Webots 中的地面通常是預設的平面  (Plane )，如果你的場景沒有地面，你需要手動添加：  在左側的 Scene Tree 視窗中，右鍵點擊 WorldInfo  > Add  > Solid。  在新增的 Solid 下，選擇 Plane。這會添加一個平面作為地面。  點擊選擇 Plane，並在右側的 Properties 視窗中調整以下屬性：  Translation：設置為  (0 , 0 , 0 )，這將平面置於世界的中央。  Size：設置為  (100 ,  0 .1 , 100 )，使地面足夠大，覆蓋機器人的運行範圍。   \n \n 加入 e-puck 機器人 \n \n 在 Scene Tree 中，右鍵點擊 WorldInfo  > Add  > Robot。  在彈出的列表中，選擇 e -puck 機器人。這會將 e -puck 添加到場景中。  選中 e -puck 並在右側的 Properties 視窗中設置以下屬性：  Translation：設置為  (0 , 0 , 0 )，將 e -puck 放置於世界中心。  你也可以調整 e -puck 的其他屬性，例如是否啟用傳感器或修改控制程式。   \n \n 加入障礙物 (Obstacle) \n \n 在這裡我們以立方體  (Box ) 來作為障礙物：  在 Scene Tree 中，右鍵點擊 WorldInfo  > Add  > Solid。  在彈出的選單中選擇 Box，這將添加一個立方體。  調整立方體的位置和大小：  Translation：設置為  (5 ,  0 .5 , 0 )，將立方體放置在地面上。  Size：設置為  (1 , 1 , 1 )，控制障礙物的大小。  如果需要，你可以再添加更多的障礙物，只需重複上述步驟。   \n \n 設置世界屬性 \n \n 點擊 WorldInfo，這是描述整個世界的節點。  在右側的 Properties 視窗中，你可以設置世界的各種屬性，例如模擬時間步長  (time step )，這會影響物理計算的精度。一般來說，時間步長設置為 32 ms 就足夠了。   \n \n 設置機器人的控制程式 \n \n 如果你希望機器人能夠運行某些程式，你可以為它指定一個控制程式：  在 Scene Tree 中選擇 e -puck 機器人。  在右側的 Properties 視窗中，尋找 Controller 欄位。  點擊欄位中的選擇框來選擇或創建控制程式。  如果你選擇創建控制程式，你將需要編寫相應的控制程式碼來控制 e -puck 的行為。例如，使用 C、C + +、Python 等語言來編寫避障邏輯。   \n \n 儲存場景 \n \n 一旦你完成場景的設置，你可以儲存世界檔案。  點擊 File（檔案）  > Save As（另存為），選擇一個合適的文件夾並給世界檔案命名。例如，可以命名為 simple _world .wbt。   \n \n 運行模擬 \n \n 在畫面上方的工具列中，點選 Play（播放）按鈕來啟動模擬。  這時候，你會看到 e -puck 會在平面上運行（如果你寫了控制程式，機器人會根據程式執行對應的行為）。   \n \n 進一步調整與測試 \n \n 如果機器人或障礙物的位置不符合預期，你可以回到 Scene Tree 中直接選擇對應的物體，並調整它們的位置和屬性。  如果需要加入更多功能，例如傳感器或更複雜的障礙物，則可以通過右鍵點擊 Solid，選擇 Add 來選擇不同類型的物體，例如 Sensor、Camera 等。  特別注意的要點： 物體屬性設置：每個物體（如機器人、障礙物等）都有許多屬性（例如位置、大小、顏色等），需要確保你調整好這些屬性，讓物體符合你的需求。  控制程式的選擇：如果你選擇使用自定義控制程式，記得指定正確的控制程式名稱，並確保該控制程式已經存在於正確的資料夾中。  時間步長  (Time Step )：模擬的時間步長影響物理計算的精度和運行速度。步長過短可能使模擬變得很慢，過長則可能使物理模擬不夠精確。 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 場景的儲存：在進行修改時，記得定期保存場景，避免因為程式崩潰或其他問題而丟失資料。  3D 模型的載入：如果需要載入外部 3D 模型或特殊物體，Webots 支援使用 PROTO 和 VRML97 格式來導入自定義模型。  結論： 通過這些步驟，你可以使用 Webots 的圖形介面手動創建一個簡單的場景，並讓機器人在其中運行。利用圖形介面可以簡化許多設定過程，但同時也需要熟悉場景結構與控制程式設置。 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'Task5.html'}, {'title': 'w3', 'text': '列出 2a 學員作業網站與倉儲連結 \n 列出 2b 學員作業網站與倉儲連結 \n 列出 2a 分組網站與倉儲連結 \n 列出 2b 分組網站與倉儲連結 \n \n 已知各班已經參與分組的學員 Github 帳號分別如下: \n a_all_members = [\'41223154\', \'41271125\', \'41271158\', \'41271146\', \'41271131\', \'CYG41223103\', \'41223102\', \'41023128\', \'41023137\', \'41223137\', \'41223157\', \'41223156\', \'otakuyoyo\', \'41223141\', \'41223113\', \'kim41223114\', \'joeisme1208\', \'41223116\', \'41223144\', \'41223140\', \'41223143\', \'41223138\', \'41223134\', \'41223136\', \'zhe41223118\', \'Spirit0224\', \'yuhao-08\', \'41223158\', \'Ren911308\', \'41223150\', \'Manto8\', \'CYA41223106\', \'yan21ed\', \'Lin41223107\', \'41223133\', \'hong41223129\', \'41223110\', \'41223147\', \'Linjiahong41223125\', \'CHN41223132\', \'Yu-Fang-Hong\', \'41023111\', \'yckaooooo\', \'kolas911205\', \'41023105\', \'40932134\', \'41223104\', \'yan41223101\', \'41223105\', \'41223153\', \'41223120\', \'41223152\', \'G8People\', \'WSE41223112\', \'41223146\', \'41223119\']\nb_all_members = [\'41223251\', \'41223211\', \'41223245\', \'41223243\', \'jjjay41223212\', \'leeshaowei0716\', \'41223234\', \'41223209\', \'41223205\', \'41223201\', \'41223202\', \'41223208-hw\', \'41223216\', \'41223217\', \'41223248\', \'emma0312\', \'41223242\', \'41223203\', \'41223144\', \'41223235\', \'RAY41223215\', \'hyy41223228\', \'41223227\', \'41223206\', \'41223226-0\', \'Cloud41223237\', \'Yujenchuang\', \'41223225\', \'ljg41223220\', \'supowen\', \'jacky93111\', \'41223246\', \'Liu41223244\', \'41223236\', \'41223219\', \'41271237\', \'41223249\', \'41223229\', \'41223224\', \'41223222\', \'41223231\', \'linryan23\', \'41023114\', \'41223230\', \'timluo123\', \'CYC41223247\', \'41223218\', \'ych0227\', \'41023215\', \'41023216\', \'41023213\', \'41071203\', \'41071204\', \'41071202\', \'c-ching\', \'YUN4\', \'tseYU000\', \'snowfall-killer\', \'junpig10\']\n \n 接著用程式列出目前各班尚未納組的學員學號。 ( 執行結果 ) \n from browser import html, document\nimport urllib.request\n  \n# 設定 URL\nurl = "https://mde.tw/list/2a.txt"\n  \n# 讀取網站內容\nresponse = urllib.request.urlopen(url)\ndata = response.read().splitlines()  # 直接讀取並按行分割\n  \n# 確保資料存在\nif len(data) > 1:\n    all_stud = data[1:]  # 跳過標題列\n    print("總共有 " + str(len(all_stud)) + " 名學員")\nelse:\n    all_stud = []\n    print("學員名單讀取失敗")\n  \n# 已分組的帳號名單\ngrouped_accounts = {\n    \'41223154\', \'41271125\', \'41271158\', \'41271146\', \'41271131\', \'CYG41223103\', \'41223102\', \'41023128\', \'41023137\', \'41223137\', \'41223157\', \'41223156\', \'otakuyoyo\', \'41223141\', \'41223113\', \'kim41223114\', \'joeisme1208\', \'41223116\', \'41223144\', \'41223140\', \'41223143\', \'41223138\', \'41223134\', \'41223136\', \'zhe41223118\', \'Spirit0224\', \'yuhao-08\', \'41223158\', \'Ren911308\', \'41223150\', \'Manto8\', \'CYA41223106\', \'yan21ed\', \'Lin41223107\', \'41223133\', \'hong41223129\', \'41223110\', \'41223147\', \'Linjiahong41223125\', \'CHN41223132\', \'Yu-Fang-Hong\', \'41023111\', \'yckaooooo\', \'kolas911205\', \'41023105\', \'40932134\', \'41223104\', \'yan41223101\', \'41223105\', \'41223153\', \'41223120\', \'41223152\', \'G8People\', \'WSE41223112\', \'41223146\', \'41223119\'\n}\n  \n# 找到網頁中的特定位置\nbrython_div1 = document["brython_div1"]\n  \n# **動態插入未分組的學號與超連結**\nindex = 1\nfor student in all_stud:\n    parts = student.strip().split()  # 用空格分割\n    if len(parts) == 0:\n        continue  # 跳過空行\n      \n    student_id = parts[0]  # 學號\n    account = parts[1] if len(parts) > 1 else student_id  # 若帳號空白則用學號當帳號\n  \n    if account not in grouped_accounts:  # 只處理未分組帳號\n        # 設定學號的超連結\n        student_link = f"https://mdecd2025.github.io/hw-{account}"\n        # 設定repo的超連結\n        repo_link = f"https://github.com/mdecd2025/hw-{account}"\n          \n        # 插入學號作為超連結，並添加 repo 連結\n        brython_div1 <= f"{index}. " + html.A(student_id, href=student_link) + " "\n        brython_div1 <= f"（" + html.A("repo", href=repo_link) + "）"\n        brython_div1 <= html.BR()  # 換行\n        index += 1 \n \n \n 1.\xa0 41023220 \xa0 （ repo ） 2.\xa0 41223111 \xa0 （ repo ） 3.\xa0 41223124 \xa0 （ repo ） 4.\xa0 41223148 \xa0 （ repo ） \n', 'tags': '', 'url': 'w3.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明:  \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n 請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中. \n 影片標題:  國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題 \n', 'tags': '', 'url': 'Final.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};