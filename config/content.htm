<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>2a第一組網站: <a class="Link--inTextBlock" href="https://mdecd2025.github.io/2a-ag1/">https://mdecd2025.github.io/2a-ag1/</a></p>
<p><span>2a第一</span><span>組</span>倉儲: <a href="https://github.com/mdecd2025/2a-ag1.git/">https://github.com/mdecd2025/2a-ag1.git/</a> </p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h1>Homework</h1>
<h2>Week1</h2>
<p>本周上課完成個人網站與分組網站的基本設定</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/qby30W8d63Y?si=JegImv-ePkTar7Wz" title="YouTube video player" width="560"></iframe></p>
<h1>List</h1>
<div>
<div><span> 組員作業網站：</span></div>
<div><span></span></div>
<div><span>41271125：<a class="anchor_edefb8 anchorUnderlineOnHover_edefb8" href="https://mdecd2025.github.io/hw-41271125/" rel="noreferrer noopener" role="button" tabindex="0" target="_blank" title="https://mdecd2025.github.io/hw-41271125/">https://mdecd2025.github.io/hw-41271125/</a> </span></div>
<div><span>41223154：<a class="anchor_edefb8 anchorUnderlineOnHover_edefb8" href="https://mdecd2025.github.io/hw-41223154/" rel="noreferrer noopener" role="button" tabindex="0" target="_blank" title="https://mdecd2025.github.io/hw-41223154/">https://mdecd2025.github.io/hw-41223154/</a> </span></div>
<div><span>41271131：<a class="anchor_edefb8 anchorUnderlineOnHover_edefb8" href="https://mdecd2025.github.io/hw-41271131/" rel="noreferrer noopener" role="button" tabindex="0" target="_blank" title="https://mdecd2025.github.io/hw-41271131/">https://mdecd2025.github.io/hw-41271131/</a> </span></div>
<div><span>41271146：<a class="anchor_edefb8 anchorUnderlineOnHover_edefb8" href="https://mdecd2025.github.io/hw-41271146/" rel="noreferrer noopener" role="button" tabindex="0" target="_blank" title="https://mdecd2025.github.io/hw-41271146/">https://mdecd2025.github.io/hw-41271146/</a> </span></div>
<div><span>41271158：<a class="Link--inTextBlock" href="https://mdecd2025.github.io/hw-41271158/">https://mdecd2025.github.io/hw-41271158/</a></span></div>
<hr/>
<div><span> 組員作業倉儲：</span></div>
<div><span></span></div>
<div><span>41271125：<a class="anchor_edefb8 anchorUnderlineOnHover_edefb8" href="https://github.com/mdecd2025/hw-41271125.git" rel="noreferrer noopener" role="button" tabindex="0" target="_blank" title="https://github.com/mdecd2025/hw-41271125.git">https://github.com/mdecd2025/hw-41271125.git</a> </span></div>
<div><span>41223154：<a class="anchor_edefb8 anchorUnderlineOnHover_edefb8" href="https://github.com/mdecd2025/hw-41223154.git" rel="noreferrer noopener" role="button" tabindex="0" target="_blank" title="https://github.com/mdecd2025/hw-41223154.git">https://github.com/mdecd2025/hw-41223154.git</a> </span></div>
<div><span> 41271131：<a class="anchor_edefb8 anchorUnderlineOnHover_edefb8" href="https://github.com/mdecd2025/hw-41271131.git" rel="noreferrer noopener" role="button" tabindex="0" target="_blank" title="https://github.com/mdecd2025/hw-41271131.git">https://github.com/mdecd2025/hw-41271131.git</a> </span></div>
<div><span> 41271146：<a class="anchor_edefb8 anchorUnderlineOnHover_edefb8" href="https://github.com/mdecd2025/hw-41271146.git" rel="noreferrer noopener" role="button" tabindex="0" target="_blank" title="https://github.com/mdecd2025/hw-41271146.git">https://github.com/mdecd2025/hw-41271146.git</a> </span></div>
<div>41271158：<a href="https://github.com/mdecd2025/hw-41271158.git">https://github.com/mdecd2025/hw-41271158.git</a> </div>
</div>
<h1>Tasks</h1>
<h2>Task1</h2>
<p>Q1：什麼是 Webots?</p>
<p>Webots 是一款開源的機器人模擬軟體，專為機器人研究、教育和工業應用設計。它允許用戶在 3D 環境中設計、測試和模擬機器人，並支援多種程式語言（如 C、C++、Python、MATLAB 和 ROS）。</p>
<p>Q2：我可以用 Webots 做什麼?</p>
<p>Webots 可用於以下用途： 機器人開發與測試：在虛擬環境中設計和測試機器人，避免硬體損壞。 人工智慧與機器學習：訓練機器人進行自動化任務，如導航、圖像識別等。 教育與學習：提供學生和研究人員一個直觀的平台來學習機器人學和控制理論。 多機器人協作：模擬多個機器人在同一環境中的交互與協作。 ROS（Robot Operating System）整合：與 ROS 無縫整合，使開發的控制器能夠在現實世界的機器人上運行。</p>
<p>Q3：要使用 Webots，我需要知道什麼?</p>
<p>基本程式設計：熟悉 C、C++、Python 或 MATLAB 之一，因為 Webots 支援這些語言來編寫控制器。 機器人學基礎：了解機器人的運動學、感測器、致動器等基本概念。 3D 環境與物理引擎：了解 Webots 如何模擬物理現象（如重力、碰撞、摩擦）。 Webots 環境：熟悉 Webots 介面、世界建模、機器人設定等基本操作。</p>
<p>Q4：什麼是世界（World）?</p>
<p>在 Webots 中，"世界" 指的是模擬環境的整體，包括： 地形與背景（如地面、天空） 物件（如障礙物、建築物） 燈光與攝影機（用於視覺化與模擬） 機器人（具有感測器、致動器的可控制實體） Webots 的世界文件使用 .wbt 格式，並基於 VRML（Virtual Reality Modeling Language）。</p>
<p>Q5：什麼是控制器（Controller）?</p>
<p>控制器是機器人的控制程式，它決定機器人的行為。控制器可以用 C、C++、Python、MATLAB 編寫，並用於處理感測器輸入、計算動作並發送指令給機器人的致動器。例如，一個簡單的控制器可以讓機器人根據攝影機輸入來避開障礙物。</p>
<p>Q6：什麼是監督控制器（Supervisor Controller）?</p>
<p>監督控制器是一種特殊的控制器，它可以控制整個模擬環境，而不僅僅是單個機器人。它能夠： 讀取與修改機器人狀態（例如位置、方向） 創建或刪除物件 控制世界時間（如重置模擬） 與多個機器人交互 監督控制器通常用於高層次控制，例如監控多個機器人、進行自動化測試或模擬複雜場景。</p>
<p></p><h2>Task2</h2>
<h2>Task3</h2>
<h2>Task4</h2>
<h2>Task5</h2>
<p><span>請整理 <a class="anchor_edefb8 anchorUnderlineOnHover_edefb8" href="https://cyberbotics.com/doc/guide/introduction-to-webots" rel="noreferrer noopener" role="button" tabindex="0" target="_blank" title="https://cyberbotics.com/doc/guide/introduction-to-webots">https://cyberbotics.com/doc/guide/introduction-to-webots</a> 中重要的英文單字與用法, 並且針對其中所使用的英文文法逐句說明:</span></p>
<p><span>重要單字及用法解析 Simulation </span><span>- 模擬</span><span> Webots 用於創建機器人模擬的環境，這裡指的是模擬機器人的行為和環境反應。</span><span> Rapid prototyping </span><span>- 快速原型設計</span><span> 這是一種開發過程，用來快速創建和測試產品原型。</span><span> Locomotion schemes </span><span>- 移動方式</span><span> 指的是機器人移動的方式或模式，如輪式、腿部式或飛行式。</span><span> Actuators </span><span>- 執行器</span><span> 是使機器人運作的裝置，如馬達、車輪等。</span><span> Controller </span><span>- 控制器</span><span> 在 Webots 中，控制器是負責控制機器人行為的程式。</span><span> Supervisor Controller </span><span>- 監控控制器</span><span> 這種控制器可以執行人類操作員通常才會執行的任務，並控制整個模擬環境。</span><span> Physics plugin </span><span>- 物理插件</span><span> 用來修改 Webots 模擬中的物理行為。</span><span> 文法分析 </span><span>"Webots is a professional mobile robot simulation software package</span><span>.</span><span>"</span><span> Webots </span><span>(主詞</span><span>) </span><span>+ is </span><span>(連繫動詞</span><span>) </span><span>+ a professional mobile robot simulation software package </span><span>(主詞補語</span><span>)。</span><span> 這句是簡單的描述句，告訴我們 Webots 是一款專業的移動機器人模擬軟體。</span><span> </span><span>"It offers a rapid prototyping environment</span><span>, that allows the user to create 3D virtual worlds with physics properties such as mass</span><span>, joints</span><span>, friction coefficients</span><span>, etc</span><span>.</span><span>"</span><span> 這句中使用了定語從句 </span><span>"that allows the user to create</span><span>.</span><span>.</span><span>.</span><span>"，修飾前面的環境。</span><span> </span><span>"that allows</span><span>"</span><span>: 用來描述這個環境具備的功能，這是一個限定性定語從句。</span><span> </span><span>"The user can add simple passive objects or active objects called mobile robots</span><span>.</span><span>"</span><span> </span><span>"called mobile robots</span><span>" 是分詞短語，修飾 </span><span>"active objects</span><span>"。這裡的 </span><span>"called</span><span>" 用來說明 </span><span>"active objects</span><span>" 的名稱是 </span><span>"mobile robots</span><span>"。</span><span> </span><span>"Webots also contains a number of interfaces to real mobile robots</span><span>, so that once your simulated robot behaves as expected</span><span>, you can transfer its control program to a real robot like e</span><span>-puck</span><span>, DARwIn</span><span>-OP</span><span>, Nao</span><span>, etc</span><span>.</span><span>"</span><span> </span><span>"so that</span><span>" 這個引導的目的從句解釋了為什麼 Webots 提供這些接口（目的是為了當模擬機器人按預期運行時，可以將控制程式轉移到真實機器人）。</span><span> </span><span>"A world</span><span>, in Webots</span><span>, is a 3D description of the properties of robots and of their environment</span><span>.</span><span>"</span><span> 這是定義句，用來解釋 </span><span>"world</span><span>" 是什麼。句中的 </span><span>"in Webots</span><span>" 用來說明這個概念是在 Webots 中的特定含義。</span><span> </span><span>"A controller is a computer program that controls a robot specified in a world file</span><span>.</span><span>"</span><span> 這是一個定義句，說明了什麼是 </span><span>"controller</span><span>"。其中 </span><span>"that controls</span><span>" 是定語從句，修飾 </span><span>"controller</span><span>"。</span><span> 常見的英文文法結構 定義句：通常用來解釋某個名詞的含義。</span><span> 例子：</span><span>"A world is a 3D description of the properties of robots</span><span>.</span><span>"</span></p>
<p><span>定語從句：用來修飾名詞，提供更多描述。</span><span> 例子：</span><span>"A controller is a program that controls a robot</span><span>.</span><span>"</span><span> 目的從句：用來說明某一行動的目的。</span><span> 例子：</span><span>"so that you can transfer its control program to a real robot</span><span>.</span><span>"</span><span> 條件句：通常描述在某些條件下會發生的情況。</span><span> 例子：</span><span>"once your simulated robot behaves as expected</span><span>, you can transfer its control program</span><span>.</span><span>.</span><span>.</span><span>"</span><span> 這篇資料簡單而清楚地介紹了 Webots 的基本功能及其應用，並且在文法上多使用定義性和解釋性的句型，幫助讀者理解軟體的各個方面。</span></p>
<p><span></span></p>
<p><span></span></p>
<ol aria-label="顏家民 中的訊息" class="scrollerInner__36d07" data-list-id="chat-messages" role="list" tabindex="0">
<li aria-setsize="-1" class="messageListItem__5126c" id="chat-messages-1354734015109922932-1354761728449187911">
<div aria-labelledby="message-username-1354760945406185542 uid_1 message-content-1354761728449187911 uid_2 message-timestamp-1354761728449187911" aria-roledescription="傳送訊息" aria-setsize="-1" class="message__5126c cozyMessage__5126c wrapper_c19a55 cozy_c19a55 zalgo_c19a55" data-list-item-id="chat-messages___chat-messages-1354734015109922932-1354761728449187911" role="article" tabindex="-1">
<div class="contents_c19a55">
<div class="markup__75297 messageContent_c19a55"><span></span></div>
<div class="markup__75297 messageContent_c19a55"><span>請摘要出下列內容</span><span>: </span><span>(放入英文文章內容</span><span>)</span></div>
</div>
<div class="buttonContainer_c19a55">
<div aria-label="訊息操作" class="buttons__5126c container__040f0" role="group">
<div class="buttonsInner__5126c popover_f84418 popoverReactionHoverBar_f84418 wrapper_f7ecac">
<div aria-label="點擊 thumbsup 反應" class="hoverBarButton_f84418 button_f7ecac" role="button" tabindex="0">
<div class="icon_f84418 buttonContent_f84418">
<div aria-label="" class="emoji emoji__040f0" data-name="👍" data-type="emoji" role="img"></div>
</div>
</div>
<div aria-label="點擊 eyes 反應" class="hoverBarButton_f84418 button_f7ecac" role="button" tabindex="0">
<div class="icon_f84418 buttonContent_f84418">
<div aria-label="" class="emoji emoji__040f0" data-name="👀" data-type="emoji" role="img"></div>
</div>
</div>
</div>
</div>
</div>
</div>
<div aria-labelledby="message-username-1354760945406185542 uid_1 message-content-1354761821202022481 uid_2 message-timestamp-1354761821202022481" aria-roledescription="傳送訊息" aria-setsize="-1" class="message__5126c cozyMessage__5126c wrapper_c19a55 cozy_c19a55 zalgo_c19a55" data-list-item-id="chat-messages___chat-messages-1354734015109922932-1354761821202022481" role="article" tabindex="-1">
<div class="contents_c19a55">
<div class="markup__75297 messageContent_c19a55" id="message-content-1354761821202022481"><span>Webots 使用者指南 R2025a 摘要：Webots 介紹 什麼是 Webots？ Webots 是一款專業的移動機器人模擬軟體。它允許使用者創建具有物理屬性的 3D 虛擬世界，如質量、關節和摩擦係數等。使用者可以添加被動物件或稱為移動機器人的主動物件，這些機器人可以具有不同的移動方式，如輪式、腿式或飛行機器人。這些機器人可裝配多種感測器和執行器（例如：相機、馬達、距離感測器等）。Webots 允許使用者為每個機器人編程，實現所需的行為。它還具有與實際機器人（如 e</span><span>-puck、Nao 和 DARwIn</span><span>-OP 等）接口的功能。</span><span> 我可以用 Webots 做什麼？ Webots 非常適合用於與移動機器人相關的研究和教育項目，涵蓋的領域包括：</span><span> 移動機器人原型設計（學術研究、汽車產業、航空業等）</span><span> 機器人運動研究（如人形機器人、四足機器人等）</span><span> 多代理研究（如群體智慧、協作型移動機器人等）</span><span> 自適應行為研究（如遺傳算法、神經網絡、人工智慧等）</span><span> 機器人教學（機器人學、C</span><span>/C</span><span>+</span><span>+</span><span>/Java</span><span>/Python 程式語言教學等）</span><span> 機器人比賽（例如 Robotstadium 或 Rat</span><span>'s Life）</span><span> 我需要知道什麼才能使用 Webots？ 若要開發模擬，您需要具備基本的程式設計知識，特別是 C、C</span><span>+</span><span>+、Java、Python 或 MATLAB 這些語言，用於編寫機器人控制程式。如果您不熟悉這些語言，也可以使用簡單的圖形化程式語言 BotStudio 來編程 e</span><span>-puck 和 Hemisson 機器人。若您希望創建自定義的機器人模型或在模擬環境中加入特殊物件，則需要具備基本的 3D 電腦圖形和 VRML97 描述語言知識。</span><span> 如何獲得使用者支援？ Cyberbotics 提供付費的使用者支援服務，包括 Premier Service 和定制開發服務。社群支援也可通過以下平台獲得：</span><span> Robotics StackExchange（用於詢問 Webots 相關技術問題）</span><span> GitHub Discussions（用於與 Webots 開發和文檔相關的問題）</span><span> GitHub Issues（用於報告 Webots 中的錯誤）</span><span> Discord（用於快速問題解答和社群討論）</span><span> Webots 模擬組成部分： Webots 模擬包括以下組件：</span><span> World 文件 </span><span>(</span><span>.wbt</span><span>)： 定義一個或多個機器人及其環境，並可能依賴外部的 PROTO 文件 </span><span>(</span><span>.proto</span><span>) 和紋理。</span><span> 控制程式： 用於控制上述機器人的程式，可使用 C、C</span><span>+</span><span>+、Java、Python 或 MATLAB 編寫。</span><span> 物理插件（可選）： 可用於修改 Webots 正常的物理行為。</span><span> 什麼是 World？ 在 Webots 中，世界是對機器人及其環境屬性的 3D 描述。它包含每個物件的位置、方向、幾何形狀、外觀（如顏色或亮度）、物理屬性、物件類型等的描述。世界是以階層結構組織的，物件可以包含其他物件（例如：一個機器人可以包含兩個車輪、一個距離感測器以及一個包含相機的關節）。世界文件不包含機器人的控制程式代碼，它僅指定每個機器人所需的控制程式名稱。世界文件儲存在 Webots 專案中的 </span><span>"worlds</span><span>" 子目錄。</span><span> 什麼是 Controller？ 控制器是控制在世界文件中指定的機器人的程式。控制器可以用 Webots 支援的任何程式語言編寫：C、C</span><span>+</span><span>+、Java、Python 或 MATLAB。當模擬啟動時，Webots 會啟動指定的控制程式，每個控制程式作為單獨的進程運行，並將控制程式與模擬中的機器人進行關聯。注意，儘管多個機器人可以使用相同的控制程式代碼，但每個機器人會啟動一個獨立的進程。</span><span> 什麼是 Supervisor Controller？ Supervisor 控制器是機器人控制器的一種，其 supervisor 欄位設置為 TRUE。它可以執行通常只能由人工操作員完成的操作，而不是由實際機器人完成。Supervisor 控制器可以用上述任一程式語言編寫，但與普通的機器人控制器不同，它將具有訪問特權操作的權限。特權操作包括模擬控制，例如將機器人移動到隨機位置、捕捉模擬畫面等。</span><span> 這篇指南簡要概述了 Webots 的功能、使用方法以及如何開始進行模擬和機器人編程。</span></div>
<div class="markup__75297 messageContent_c19a55"><span></span></div>
<div class="markup__75297 messageContent_c19a55"><span></span></div>
<div class="markup__75297 messageContent_c19a55"><span></span></div>
<div class="markup__75297 messageContent_c19a55"><span></span></div>
<div class="markup__75297 messageContent_c19a55"><span></span></div>
<div class="markup__75297 messageContent_c19a55">
<ol aria-label="顏家民 中的訊息" class="scrollerInner__36d07" data-list-id="chat-messages" role="list" tabindex="0">
<li aria-setsize="-1" class="messageListItem__5126c" id="chat-messages-1354734015109922932-1354762655637831740">
<div aria-labelledby="message-username-1354760945406185542 uid_1 message-content-1354762655637831740 uid_2 message-timestamp-1354762655637831740" aria-roledescription="傳送訊息" aria-setsize="-1" class="message__5126c cozyMessage__5126c wrapper_c19a55 cozy_c19a55 zalgo_c19a55" data-list-item-id="chat-messages___chat-messages-1354734015109922932-1354762655637831740" role="article" tabindex="-1">
<div class="contents_c19a55">
<div class="markup__75297 messageContent_c19a55" id="message-content-1354762655637831740"><span>請列出上述文章中的重要的英文單字與解釋</span><span>, 以及出現在文句中的用法</span><span>:</span>
<ol start="1">
<li><span>Webots</span></li>
</ol>
<span>解釋：Webots 是一款專業的移動機器人模擬軟體。</span><span> 用法：</span><span> </span><span>"Webots is a professional mobile robot simulation software</span><span>.</span><span>"</span><span> 在此句中，</span><span>"Webots</span><span>" 是主語，指的是一款特定的軟體。</span><span> </span>
<ol start="2">
<li><span>Simulation</span></li>
</ol>
<span>解釋：模擬，指透過電腦來重現現實世界或設計情境的過程。</span><span> 用法：</span><span> </span><span>"Webots allows users to create 3D virtual worlds with physics properties</span><span>.</span><span>"</span><span> 在此句中，</span><span>"simulation</span><span>" 描述了 Webots 中的虛擬模擬世界。</span><span> </span>
<ol start="3">
<li><span>Controller</span></li>
</ol>
<span>解釋：控制器，指控制機器人運行的程式或設備。</span><span> 用法：</span><span> </span><span>"A controller is a computer program that controls a robot specified in a world file</span><span>.</span><span>"</span><span> 在此句中，</span><span>"controller</span><span>" 是用來描述控制機器人的程式。</span><span> </span>
<ol start="4">
<li><span>Prototype</span></li>
</ol>
<span>解釋：原型，指設計的初步版本，用來測試概念或功能。</span></div>
</div>
<div class="buttonContainer_c19a55">
<div aria-label="訊息操作" class="buttons__5126c container__040f0" role="group">
<div class="buttonsInner__5126c popover_f84418 popoverReactionHoverBar_f84418 wrapper_f7ecac">
<div aria-label="點擊 thumbsup 反應" class="hoverBarButton_f84418 button_f7ecac" role="button" tabindex="0">
<div class="icon_f84418 buttonContent_f84418">
<div aria-label="" class="emoji emoji__040f0" data-name="👍" data-type="emoji" role="img"></div>
</div>
</div>
<div aria-label="點擊 eyes 反應" class="hoverBarButton_f84418 button_f7ecac" role="button" tabindex="0">
<div class="icon_f84418 buttonContent_f84418">
<div aria-label="" class="emoji emoji__040f0" data-name="👀" data-type="emoji" role="img"></div>
</div>
</div>
<div aria-label="點擊 poop 反應" class="hoverBarButton_f84418 button_f7ecac" role="button" tabindex="0">
<div class="icon_f84418 buttonContent_f84418">
<div aria-label="" class="emoji emoji__040f0" data-name="💩" data-type="emoji" role="img"><span>用法：</span><span> </span><span>"Mobile robot prototyping </span><span>(academic research</span><span>, the automotive industry</span><span>, etc</span><span>.</span><span>)</span><span>"</span><span> 在此句中，</span><span>"prototyping</span><span>" 描述了移動機器人原型設計的過程。</span></div>
</div>
</div>
</div>
</div>
</div>
</div>
<div aria-labelledby="message-username-1354762878694981743 uid_1 message-content-1354762878694981743 uid_2 message-timestamp-1354762878694981743" aria-roledescription="傳送訊息" aria-setsize="-1" class="message__5126c cozyMessage__5126c groupStart__5126c wrapper_c19a55 cozy_c19a55 zalgo_c19a55" data-list-item-id="chat-messages___chat-messages-1354734015109922932-1354762878694981743" role="article" tabindex="-1">
<div class="contents_c19a55">
<div class="markup__75297 messageContent_c19a55" id="message-content-1354762878694981743">
<ol start="5">
<li><span>Locomotion</span></li>
</ol>
<span>解釋：運動，指移動機器人移動的方式或機制。</span><span> 用法：</span><span> </span><span>"These robots can have different locomotion schemes </span><span>(wheeled robots</span><span>, legged robots</span><span>, or flying robots</span><span>)</span><span>.</span><span>"</span><span> 在此句中，</span><span>"locomotion</span><span>" 指的是機器人運動的方式。</span><span> </span>
<ol start="6">
<li><span>Sensor</span></li>
</ol>
<span>解釋：感測器，用來探測並收集周圍環境的數據。</span><span> 用法：</span><span> </span><span>"They may be equipped with a number of sensor and actuator devices</span><span>, such as distance sensors</span><span>, drive wheels</span><span>, cameras</span><span>.</span><span>"</span><span> 在此句中，</span><span>"sensor</span><span>" 指的是用來收集環境資訊的裝置。</span><span> </span>
<ol start="7">
<li><span>Actuator</span></li>
</ol>
<span>解釋：執行器，指能夠根據控制信號驅動機器人行動的裝置。</span><span> 用法：</span><span> </span><span>"They may be equipped with a number of sensor and actuator devices</span><span>.</span><span>"</span><span> 在此句中，</span><span>"actuator</span><span>" 指的是驅動機器人動作的裝置。</span><span> </span>
<ol start="8">
<li><span>Interface</span></li>
</ol>
<span>解釋：接口，指不同系統或設備間的連接方式或溝通協議。</span><span> 用法：</span><span> </span><span>"Webots also contains a number of interfaces to real mobile robots</span><span>.</span><span>"</span><span> 在此句中，</span><span>"interface</span><span>" 指的是 Webots 與真實機器人之間的連接方式。</span><span> </span>
<ol start="9">
<li><span>Model</span></li>
</ol>
<span>解釋：模型，指模擬或實際的機器人或物件的數位表示。</span><span> 用法：</span><span> </span><span>"Webots contains a large number of robot models and controller program examples</span><span>.</span><span>"</span><span> 在此句中，</span><span>"model</span><span>" 指的是不同的機器人模型。</span><span> </span>
<ol start="10">
<li><span>Programming Language</span></li>
</ol>
<span>解釋：程式語言，用來編寫控制程式的語言。</span><span> 用法：</span><span> </span><span>"A basic knowledge of the C</span><span>, C</span><span>+</span><span>+</span><span>, Java</span><span>, Python or MATLAB programming language is necessary</span><span>.</span><span>"</span><span> 在此句中，</span><span>"programming language</span><span>" 指的是用來編寫機器人控制程式的語言。</span><span> </span>
<ol start="11">
<li><span>Environment</span></li>
</ol>
<span>解釋：環境，指機器人所處的虛擬或真實世界。</span><span> 用法：</span><span> </span><span>"A world file defines one or several robots and their environment</span><span>.</span><span>"</span><span> 在此句中，</span><span>"environment</span><span>" 指的是機器人所處的環境。</span><span> </span>
<ol start="12">
<li><span>Hierarchical Structure</span></li>
</ol>
<span>解釋：階層結構，指在結構上具有層級關係的組織方式。</span><span> 用法：</span><span> </span><span>"Worlds are organized as hierarchical structures</span><span>.</span><span>"</span><span> 在此句中，</span><span>"hierarchical structure</span><span>" 描述了世界檔案中的組織形式。</span><span> </span>
<ol start="13">
<li><span>Interpret</span></li>
</ol>
<span>解釋：解釋，指執行程式碼而不需要先進行編譯。</span><span> 用法：</span><span> </span><span>"Python and MATLAB controllers are interpreted by the corresponding run</span><span>-time systems</span><span>.</span><span>"</span><span> 在此句中，</span><span>"interpreted</span><span>" 描述了 Python 和 MATLAB 控制器如何在運行時被解釋執行。</span><span> </span>
<ol start="14">
<li><span>Compile</span></li>
</ol>
<span>解釋：編譯，指將程式碼轉換為計算機可以直接執行的格式。</span><span> 用法：</span><span> </span><span>"C and C</span><span>+</span><span>+ controllers are compiled to platform</span><span>-dependent binary executables</span><span>.</span><span>"</span><span> 在此句中，</span><span>"compiled</span><span>" 描述了 C 和 C</span><span>+</span><span>+ 控制器如何轉換為二進位執行檔。</span><span> </span>
<ol start="15">
<li><span>Supervisor</span></li>
</ol>
<span>解釋：監督，指具有高級操作權限的控制器。</span></div>
<div class="markup__75297 messageContent_c19a55"></div>
</div>
</div>
<div aria-labelledby="message-username-1354762878694981743 uid_1 message-content-1354762878694981743 uid_2 message-timestamp-1354762878694981743" aria-roledescription="傳送訊息" aria-setsize="-1" class="message__5126c cozyMessage__5126c groupStart__5126c wrapper_c19a55 cozy_c19a55 zalgo_c19a55" data-list-item-id="chat-messages___chat-messages-1354734015109922932-1354762878694981743" role="article" tabindex="-1">
<div class="contents_c19a55">
<div class="markup__75297 messageContent_c19a55" id="message-content-1354762878694981743"><span>用法：</span></div>
</div>
<div class="buttonContainer_c19a55">
<div aria-label="訊息操作" class="buttons__5126c container__040f0 isHeader__040f0" role="group">
<div class="buttonsInner__5126c popover_f84418 popoverReactionHoverBar_f84418 wrapper_f7ecac">
<div class="separator_f84418"><span>"The Supervisor controller is the controller of a Robot whose supervisor field is set to TRUE</span><span>.</span><span>"</span><span> 在此句中，</span><span>"supervisor</span><span>" 描述了一種具有特權操作權限的控制器。</span><span> 這些單字及其用法涵蓋了 Webots 的基本功能、使用方式和術語，有助於理解 Webots 模擬軟體的各個方面。</span></div>
<div class="separator_f84418"><span></span></div>
<div class="separator_f84418"><span></span></div>
<div class="separator_f84418"><span></span></div>
<div class="separator_f84418"><span></span></div>
<div class="separator_f84418"><span></span></div>
<div class="separator_f84418"><span></span></div>
<div class="separator_f84418">
<ol aria-label="顏家民 中的訊息" class="scrollerInner__36d07" data-list-id="chat-messages" role="list" tabindex="0">
<li aria-setsize="-1" class="messageListItem__5126c" id="chat-messages-1354734015109922932-1354763474466639893">
<div aria-labelledby="message-username-1354762878694981743 uid_1 message-content-1354763474466639893 uid_2 message-timestamp-1354763474466639893" aria-roledescription="傳送訊息" aria-setsize="-1" class="message__5126c cozyMessage__5126c wrapper_c19a55 cozy_c19a55 zalgo_c19a55" data-list-item-id="chat-messages___chat-messages-1354734015109922932-1354763474466639893" role="article" tabindex="-1">
<div class="contents_c19a55">
<div class="markup__75297 messageContent_c19a55" id="message-content-1354763474466639893"><span>請詳細說明如何採手動方式在 Webots 建立下列場景</span><span>:</span><span> ChatGPT 說： 要在 Webots 中手動建立一個簡單的場景，我們可以按照以下步驟操作。我會提供一個範例，假設你想建立一個包含地面、簡單的機器人（例如，e</span><span>-puck 機器人）和一些障礙物的場景。以下是手動設置的具體步驟：</span><span> </span>
<ol start="1">
<li><span>開啟 Webots 軟體</span></li>
</ol>
<span>首先，啟動 Webots 軟體。如果你尚未安裝 Webots，可以從其官方網站下載並安裝。</span><span> </span>
<ol start="2">
<li><span>創建新專案</span></li>
</ol>
<span>在 Webots 中，點選 </span><span>"File</span><span>"（檔案） </span><span>&gt; </span><span>"New World</span><span>"（新世界）來創建一個新的世界。</span><span> 這會自動打開一個新的場景並顯示在視窗中。</span><span> </span>
<ol start="3">
<li><span>設置地面 (Ground)</span></li>
</ol>
<span>Webots 中的地面通常是一個 Plane 物體，並且預設會包含在新創建的場景中。如果你沒有看到地面，或者想要自定義它：</span><span> 在左邊的 Scene Tree（場景樹）中，右鍵點擊 WorldInfo </span><span>&gt; Add </span><span>&gt; Solid。</span><span> 在 </span><span>"Solid</span><span>" 下，選擇 Plane，這將自動添加一個平面。</span><span> 點擊平面並調整其屬性：</span><span> Translation：調整平面的位置，通常設置為 </span><span>(0</span><span>, 0</span><span>, 0</span><span>)，表示它位於世界的中心。</span><span> Size：設定為 </span><span>(100</span><span>, </span><span>0</span><span>.1</span><span>, 100</span><span>) 使它成為一個大型的地面。</span><span> </span>
<ol start="4">
<li><span>加入機器人 (例如 e-puck)</span></li>
</ol>
<span>在 Webots 中，你可以從庫中選擇機器人模型來添加：</span><span> 在 Scene Tree 中右鍵點擊 WorldInfo，選擇 Add </span><span>&gt; Robot。</span><span> 點擊 Add 後，選擇 e</span><span>-puck 機器人（它是 Webots 的預設機器人之一）。</span><span> e</span><span>-puck 會自動添加到你的場景中。調整機器人的位置：</span><span> Translation：設定為 </span><span>(0</span><span>, 0</span><span>, 0</span><span>) 或任何你希望它出現的位置。</span><span> 在機器人的屬性中，調整其控制程式（如果需要），或者保留預設。</span><span> </span>
<ol start="5">
<li><span>加入障礙物 (Obstacle)</span></li>
</ol>
<span>假設你想添加幾個簡單的障礙物，這裡是加入立方體的步驟：</span><span> 右鍵點擊 WorldInfo，選擇 Add </span><span>&gt; Solid。</span><span> 在 </span><span>"Solid</span><span>" 下，選擇 Box，這將添加一個立方體。</span><span> 調整立方體的位置和大小：</span><span> Translation：設定為 </span><span>(5</span><span>, </span><span>0</span><span>.5</span><span>, 0</span><span>)，將立方體放在地面上方。</span><span> Size：設定為 </span><span>(1</span><span>, 1</span><span>, 1</span><span>)，控制障礙物的大小。</span><span> 重複這個過程來添加更多的障礙物。你可以調整位置來創建更具挑戰性的場景。</span><span> </span>
<ol start="6">
<li><span>設置場景屬性</span></li>
</ol>
<span>WorldInfo：可以在 WorldInfo 節點下修改世界的基本信息，比如 name（名稱）或 simulation time step（模擬時間步長）。</span><span> 調整 time step（模擬步長），這可以影響模擬的精度。通常設置為 32 毫秒（</span><span>0</span><span>.032）是合理的。</span><span> </span>
<ol start="7">
<li><span>檢查並儲存場景</span></li>
</ol>
<span>完成以上步驟後，你可以按下 Run 按鈕來檢查場景。</span><span> 如果你滿意這個場景，可以選擇 File </span><span>&gt; Save As 來保存你的場景，並給它一個有意義的名稱。</span><span> </span>
<ol start="8">
<li><span>編寫控制程式</span></li>
</ol>
<span>如果你希望機器人能夠根據特定邏輯運行（例如避開障礙物），你可以編寫控制程式：</span><span> 在 Scene Tree 中，找到 e</span><span>-puck 機器人，然後右鍵選擇 Add </span><span>&gt; Controller。</span><span> 選擇一種編程語言（例如 C、C</span><span>+</span><span>+、Python 等），並開始編寫控制程式來定義機器人的行為。</span><span> </span>
<ol start="9">
<li><span>運行模擬</span></li>
</ol>
<span>完成場景的設置後，你可以點選上方的 Play 按鈕來運行模擬。</span><span> 這樣你就可以看到你的機器人如何與障礙物互動，並且可以進行調整和優化。</span><span> </span>
<ol start="10">
<li><span>進一步的設置（可選）</span></li>
</ol>
<span>你可以添加更多物體，如樹木、建築、燈光等，以使場景更加豐富。</span><span> 若你希望進行更高級的控制，還可以編寫 Supervisor 控制器來進行全局管理和控制。</span><span> 結論 通過以上步驟，你就能夠在 Webots 中手動創建一個簡單的模擬場景，包括地面、機器人和障礙物。你可以繼續探索 Webots 提供的其他功能，像是設置傳感器、進行機器人控制程式編寫，以及進行更多模擬測試。</span></div>
<div class="markup__75297 messageContent_c19a55"><span></span></div>
<div class="markup__75297 messageContent_c19a55"><span></span></div>
<div class="markup__75297 messageContent_c19a55"><span></span></div>
<div class="markup__75297 messageContent_c19a55"><span></span></div>
<div class="markup__75297 messageContent_c19a55"><span></span></div>
<div class="markup__75297 messageContent_c19a55"><span></span></div>
<div class="markup__75297 messageContent_c19a55"><span></span></div>
<div class="markup__75297 messageContent_c19a55">
<ol aria-label="顏家民 中的訊息" class="scrollerInner__36d07" data-list-id="chat-messages" role="list" tabindex="0">
<li aria-setsize="-1" class="messageListItem__5126c" id="chat-messages-1354734015109922932-1354764125968011396">
<div aria-describedby="uid_3 message-reactions-1354764125968011396" aria-labelledby="message-username-1354762878694981743 uid_1 message-content-1354764125968011396 uid_2 message-timestamp-1354764125968011396" aria-roledescription="傳送訊息" aria-setsize="-1" class="message__5126c cozyMessage__5126c wrapper_c19a55 cozy_c19a55 zalgo_c19a55" data-list-item-id="chat-messages___chat-messages-1354734015109922932-1354764125968011396" role="article" tabindex="-1">
<div class="contents_c19a55">
<div class="markup__75297 messageContent_c19a55" id="message-content-1354764125968011396"><span>希望可以手把手一步步說明該如何利用圖形介面 menu 建立這個場景</span><span>, 過程中有那些要點必須特別注意</span><span>?</span><span> ChatGPT 說： 當你使用 Webots 的圖形介面來建立場景時，通常會使用 Scene Tree 和 3D 視覺化介面 來進行操作。以下是手把手的步驟來創建一個簡單的場景（包含地面、e</span><span>-puck 機器人和障礙物）。在每一步中，我會指出一些需要特別注意的要點。</span><span> </span>
<ol start="1">
<li><span>啟動 Webots 並創建新專案</span></li>
</ol>
<span>打開 Webots 軟體。</span><span> 點選上方菜單中的 File（檔案）</span><span>&gt; New World（新世界），來創建一個新的場景。這會自動打開一個新的空白世界。</span><span> </span>
<ol start="2">
<li><span>加入地面 (Ground)</span></li>
</ol>
<span>Webots 中的地面通常是預設的平面 </span><span>(Plane</span><span>)，如果你的場景沒有地面，你需要手動添加：</span><span> 在左側的 Scene Tree 視窗中，右鍵點擊 WorldInfo </span><span>&gt; Add </span><span>&gt; Solid。</span><span> 在新增的 Solid 下，選擇 Plane。這會添加一個平面作為地面。</span><span> 點擊選擇 Plane，並在右側的 Properties 視窗中調整以下屬性：</span><span> Translation：設置為 </span><span>(0</span><span>, 0</span><span>, 0</span><span>)，這將平面置於世界的中央。</span><span> Size：設置為 </span><span>(100</span><span>, </span><span>0</span><span>.1</span><span>, 100</span><span>)，使地面足夠大，覆蓋機器人的運行範圍。</span><span> </span>
<ol start="3">
<li><span>加入 e-puck 機器人</span></li>
</ol>
<span>在 Scene Tree 中，右鍵點擊 WorldInfo </span><span>&gt; Add </span><span>&gt; Robot。</span><span> 在彈出的列表中，選擇 e</span><span>-puck 機器人。這會將 e</span><span>-puck 添加到場景中。</span><span> 選中 e</span><span>-puck 並在右側的 Properties 視窗中設置以下屬性：</span><span> Translation：設置為 </span><span>(0</span><span>, 0</span><span>, 0</span><span>)，將 e</span><span>-puck 放置於世界中心。</span><span> 你也可以調整 e</span><span>-puck 的其他屬性，例如是否啟用傳感器或修改控制程式。</span><span> </span>
<ol start="4">
<li><span>加入障礙物 (Obstacle)</span></li>
</ol>
<span>在這裡我們以立方體 </span><span>(Box</span><span>) 來作為障礙物：</span><span> 在 Scene Tree 中，右鍵點擊 WorldInfo </span><span>&gt; Add </span><span>&gt; Solid。</span><span> 在彈出的選單中選擇 Box，這將添加一個立方體。</span><span> 調整立方體的位置和大小：</span><span> Translation：設置為 </span><span>(5</span><span>, </span><span>0</span><span>.5</span><span>, 0</span><span>)，將立方體放置在地面上。</span><span> Size：設置為 </span><span>(1</span><span>, 1</span><span>, 1</span><span>)，控制障礙物的大小。</span><span> 如果需要，你可以再添加更多的障礙物，只需重複上述步驟。</span><span> </span>
<ol start="5">
<li><span>設置世界屬性</span></li>
</ol>
<span>點擊 WorldInfo，這是描述整個世界的節點。</span><span> 在右側的 Properties 視窗中，你可以設置世界的各種屬性，例如模擬時間步長 </span><span>(time step</span><span>)，這會影響物理計算的精度。一般來說，時間步長設置為 32 ms 就足夠了。</span><span> </span>
<ol start="6">
<li><span>設置機器人的控制程式</span></li>
</ol>
<span>如果你希望機器人能夠運行某些程式，你可以為它指定一個控制程式：</span><span> 在 Scene Tree 中選擇 e</span><span>-puck 機器人。</span><span> 在右側的 Properties 視窗中，尋找 Controller 欄位。</span><span> 點擊欄位中的選擇框來選擇或創建控制程式。</span><span> 如果你選擇創建控制程式，你將需要編寫相應的控制程式碼來控制 e</span><span>-puck 的行為。例如，使用 C、C</span><span>+</span><span>+、Python 等語言來編寫避障邏輯。</span><span> </span>
<ol start="7">
<li><span>儲存場景</span></li>
</ol>
<span>一旦你完成場景的設置，你可以儲存世界檔案。</span><span> 點擊 File（檔案） </span><span>&gt; Save As（另存為），選擇一個合適的文件夾並給世界檔案命名。例如，可以命名為 simple</span><span>_world</span><span>.wbt。</span><span> </span>
<ol start="8">
<li><span>運行模擬</span></li>
</ol>
<span>在畫面上方的工具列中，點選 Play（播放）按鈕來啟動模擬。</span><span> 這時候，你會看到 e</span><span>-puck 會在平面上運行（如果你寫了控制程式，機器人會根據程式執行對應的行為）。</span><span> </span>
<ol start="9">
<li><span>進一步調整與測試</span></li>
</ol>
<span>如果機器人或障礙物的位置不符合預期，你可以回到 Scene Tree 中直接選擇對應的物體，並調整它們的位置和屬性。</span><span> 如果需要加入更多功能，例如傳感器或更複雜的障礙物，則可以通過右鍵點擊 Solid，選擇 Add 來選擇不同類型的物體，例如 Sensor、Camera 等。</span><span> 特別注意的要點： 物體屬性設置：每個物體（如機器人、障礙物等）都有許多屬性（例如位置、大小、顏色等），需要確保你調整好這些屬性，讓物體符合你的需求。</span><span> 控制程式的選擇：如果你選擇使用自定義控制程式，記得指定正確的控制程式名稱，並確保該控制程式已經存在於正確的資料夾中。</span><span> 時間步長 </span><span>(Time Step</span><span>)：模擬的時間步長影響物理計算的精度和運行速度。步長過短可能使模擬變得很慢，過長則可能使物理模擬不夠精確。</span></div>
</div>
<div class="container_b7e1cb" id="message-accessories-1354764125968011396">
<div class="reactions__23977 largeReactions__23977" id="message-reactions-1354764125968011396" role="group">
<div></div>
<div>
<div class="reaction__23977">
<div aria-disabled="false" aria-expanded="false" aria-label="poop，1 個反應，按下就能反應" aria-pressed="false" class="reactionInner__23977" role="button" tabindex="0">
<div class=""></div>
</div>
</div>
</div>
</div>
</div>
</div>
<div aria-describedby="uid_3 message-reactions-1354764136868872262" aria-labelledby="message-username-1354762878694981743 uid_1 message-content-1354764136868872262 uid_2 message-timestamp-1354764136868872262" aria-roledescription="傳送訊息" aria-setsize="-1" class="message__5126c cozyMessage__5126c wrapper_c19a55 cozy_c19a55 zalgo_c19a55" data-list-item-id="chat-messages___chat-messages-1354734015109922932-1354764136868872262" role="article" tabindex="-1">
<div class="contents_c19a55">
<div class="markup__75297 messageContent_c19a55" id="message-content-1354764136868872262"><span>場景的儲存：在進行修改時，記得定期保存場景，避免因為程式崩潰或其他問題而丟失資料。</span><span> 3D 模型的載入：如果需要載入外部 3D 模型或特殊物體，Webots 支援使用 PROTO 和 VRML97 格式來導入自定義模型。</span><span> 結論： 通過這些步驟，你可以使用 Webots 的圖形介面手動創建一個簡單的場景，並讓機器人在其中運行。利用圖形介面可以簡化許多設定過程，但同時也需要熟悉場景結構與控制程式設置。</span></div>
</div>
</div>
</li>
</ol>
</div>
<div class="markup__75297 messageContent_c19a55"><span></span></div>
</div>
</div>
</li>
</ol>
</div>
</div>
</div>
</div>
</div>
<div aria-labelledby="message-username-1354762878694981743 uid_1 message-content-1354762887666729051 uid_2 message-timestamp-1354762887666729051" aria-roledescription="傳送訊息" aria-setsize="-1" class="message__5126c cozyMessage__5126c wrapper_c19a55 cozy_c19a55 zalgo_c19a55" data-list-item-id="chat-messages___chat-messages-1354734015109922932-1354762887666729051" role="article" tabindex="-1"></div>
</li>
</ol>
</div>
</div>
</div>
</li>
</ol><h3>w3</h3>
<p><a href="https://mdecd2025.github.io/hw-scrum-1/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/113a3d7e19b36a7672a136f3731ef07b095adeef/list_2a.py">列出 2a 學員作業網站與倉儲連結</a></p>
<p><a href="https://mdecd2025.github.io/hw-scrum-1/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/29173e8b73ad422fd7c44bcd93658a3579d63633/list_stage_3.py">列出 2b 學員作業網站與倉儲連結</a></p>
<p><a href="https://mdecd2025.github.io/hw-scrum-1/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/a4414e311503fac8d57d4f5e44999147c54cf7fa/list_2a_group.py">列出 2a 分組網站與倉儲連結</a></p>
<p><a href="https://mdecd2025.github.io/hw-scrum-1/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/a4414e311503fac8d57d4f5e44999147c54cf7fa/list_2b_group.py">列出 2b 分組網站與倉儲連結</a></p>
<hr/>
<p><span>已知各班已經參與分組的學員 Github 帳號分別如下:</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">a_all_members = ['41223154', '41271125', '41271158', '41271146', '41271131', 'CYG41223103', '41223102', '41023128', '41023137', '41223137', '41223157', '41223156', 'otakuyoyo', '41223141', '41223113', 'kim41223114', 'joeisme1208', '41223116', '41223144', '41223140', '41223143', '41223138', '41223134', '41223136', 'zhe41223118', 'Spirit0224', 'yuhao-08', '41223158', 'Ren911308', '41223150', 'Manto8', 'CYA41223106', 'yan21ed', 'Lin41223107', '41223133', 'hong41223129', '41223110', '41223147', 'Linjiahong41223125', 'CHN41223132', 'Yu-Fang-Hong', '41023111', 'yckaooooo', 'kolas911205', '41023105', '40932134', '41223104', 'yan41223101', '41223105', '41223153', '41223120', '41223152', 'G8People', 'WSE41223112', '41223146', '41223119']
b_all_members = ['41223251', '41223211', '41223245', '41223243', 'jjjay41223212', 'leeshaowei0716', '41223234', '41223209', '41223205', '41223201', '41223202', '41223208-hw', '41223216', '41223217', '41223248', 'emma0312', '41223242', '41223203', '41223144', '41223235', 'RAY41223215', 'hyy41223228', '41223227', '41223206', '41223226-0', 'Cloud41223237', 'Yujenchuang', '41223225', 'ljg41223220', 'supowen', 'jacky93111', '41223246', 'Liu41223244', '41223236', '41223219', '41271237', '41223249', '41223229', '41223224', '41223222', '41223231', 'linryan23', '41023114', '41223230', 'timluo123', 'CYC41223247', '41223218', 'ych0227', '41023215', '41023216', '41023213', '41071203', '41071204', '41071202', 'c-ching', 'YUN4', 'tseYU000', 'snowfall-killer', 'junpig10']
</pre>
<p><span>接著用程式列出目前各班尚未納組的學員學號。</span><span>(<a href="https://mdecd2025.github.io/hw-41271125/content/Brython.html?src=https://gist.githubusercontent.com/41271125/8b4dc0406e59a5469ababd79c7082221/raw/2b64ce4145438287df6bae6ad11564f75ae18083/teamless_list.py">執行結果</a></span><span>)</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document
import urllib.request
  
# 設定 URL
url = "https://mde.tw/list/2a.txt"
  
# 讀取網站內容
response = urllib.request.urlopen(url)
data = response.read().splitlines()  # 直接讀取並按行分割
  
# 確保資料存在
if len(data) &gt; 1:
    all_stud = data[1:]  # 跳過標題列
    print("總共有 " + str(len(all_stud)) + " 名學員")
else:
    all_stud = []
    print("學員名單讀取失敗")
  
# 已分組的帳號名單
grouped_accounts = {
    '41223154', '41271125', '41271158', '41271146', '41271131', 'CYG41223103', '41223102', '41023128', '41023137', '41223137', '41223157', '41223156', 'otakuyoyo', '41223141', '41223113', 'kim41223114', 'joeisme1208', '41223116', '41223144', '41223140', '41223143', '41223138', '41223134', '41223136', 'zhe41223118', 'Spirit0224', 'yuhao-08', '41223158', 'Ren911308', '41223150', 'Manto8', 'CYA41223106', 'yan21ed', 'Lin41223107', '41223133', 'hong41223129', '41223110', '41223147', 'Linjiahong41223125', 'CHN41223132', 'Yu-Fang-Hong', '41023111', 'yckaooooo', 'kolas911205', '41023105', '40932134', '41223104', 'yan41223101', '41223105', '41223153', '41223120', '41223152', 'G8People', 'WSE41223112', '41223146', '41223119'
}
  
# 找到網頁中的特定位置
brython_div1 = document["brython_div1"]
  
# **動態插入未分組的學號與超連結**
index = 1
for student in all_stud:
    parts = student.strip().split()  # 用空格分割
    if len(parts) == 0:
        continue  # 跳過空行
      
    student_id = parts[0]  # 學號
    account = parts[1] if len(parts) &gt; 1 else student_id  # 若帳號空白則用學號當帳號
  
    if account not in grouped_accounts:  # 只處理未分組帳號
        # 設定學號的超連結
        student_link = f"https://mdecd2025.github.io/hw-{account}"
        # 設定repo的超連結
        repo_link = f"https://github.com/mdecd2025/hw-{account}"
          
        # 插入學號作為超連結，並添加 repo 連結
        brython_div1 &lt;= f"{index}. " + html.A(student_id, href=student_link) + " "
        brython_div1 &lt;= f"（" + html.A("repo", href=repo_link) + "）"
        brython_div1 &lt;= html.BR()  # 換行
        index += 1</pre>
<p></p>
<hr/>
<p><span>1. </span><a href="https://mdecd2025.github.io/hw-41023220">41023220</a><span> </span><span>（</span><a href="https://github.com/mdecd2025/hw-41023220">repo</a><span>）</span><br/><span>2. </span><a href="https://mdecd2025.github.io/hw-FGH41223111">41223111</a><span> </span><span>（</span><a href="https://github.com/mdecd2025/hw-FGH41223111">repo</a><span>）</span><br/><span>3. </span><a href="https://mdecd2025.github.io/hw-41223124">41223124</a><span> </span><span>（</span><a href="https://github.com/mdecd2025/hw-41223124">repo</a><span>）</span><br/><span>4. </span><a href="https://mdecd2025.github.io/hw-41223148">41223148</a><span> </span><span>（</span><a href="https://github.com/mdecd2025/hw-41223148">repo</a><span>）</span></p>
<h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>